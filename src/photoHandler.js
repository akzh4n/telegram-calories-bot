const { analyzeImageWithGemini } = require('./geminiService');
const { downloadTelegramFile } = require('./utils/fileDownloader');
const logger = require('./utils/logger');

/**
 * @param {TelegrafContext} ctx - 
 */
async function handlePhoto(ctx) {
  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ –∫ –ø—Ä–æ–º–∏—Å—É
  const withTimeout = (promise, ms, errorMessage) => {
    return Promise.race([
      promise,
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error(errorMessage)), ms)
      )
    ]);
  };

  const processingMessage = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –±–ª—é–¥–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
  
  try {
    const photoInfo = ctx.message.photo[ctx.message.photo.length - 1];
    const fileId = photoInfo.file_id;
    
    logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: ${fileId}, —Ä–∞–∑–º–µ—Ä: ${photoInfo.width}x${photoInfo.height}, ${photoInfo.file_size} –±–∞–π—Ç`);
    
    const imageData = await withTimeout(
      downloadTelegramFile(ctx, fileId),
      30000, 
      '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ'
    );
    
    logger.info(`–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: ${imageData.length} –±–∞–π—Ç`);
    
    const analysisResult = await withTimeout(
      analyzeImageWithGemini(imageData),
      60000, 
      '–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
    );
    
    logger.info(`–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${analysisResult ? analysisResult.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`);
  
    try {
      await ctx.telegram.deleteMessage(ctx.chat.id, processingMessage.message_id);
    } catch (deleteError) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:', deleteError.message);
    }

    if (analysisResult && analysisResult.trim() !== '') {
      try {
        await ctx.reply(`${analysisResult}`, { parse_mode: 'Markdown' });
      } catch (markdownError) {
        logger.warn('–û—à–∏–±–∫–∞ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', markdownError.message);
        await ctx.reply(`${analysisResult}`, { parse_mode: 'HTML' });
      }
    } else {
      await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.');
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error.message);

    try {
      await ctx.telegram.deleteMessage(ctx.chat.id, processingMessage.message_id);
    } catch (deleteError) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:', deleteError.message);
    }
    
    let errorMessage = 'üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.';
    
    if (error.message.includes('—Ç–∞–π–º–∞—É—Ç–∞') || error.message.includes('too much time')) {
      errorMessage = '‚è±Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    
    await ctx.reply(errorMessage + '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –±–ª—é–¥–æ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

module.exports = { handlePhoto };


module.exports = { handlePhoto };